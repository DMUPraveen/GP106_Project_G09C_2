window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Hardware", "modulename": "Hardware", "type": "module", "doc": "<p>Contains modules that help with communicating with the hardware and \ninterpreting the data</p>\n"}, {"fullname": "Hardware.Thermistor_Lib", "modulename": "Hardware.Thermistor_Lib", "type": "module", "doc": "<p>Conatins functions for converting the read voltage values from the thermistor\ninto temperature value in degree Celcius</p>\n"}, {"fullname": "Hardware.Thermistor_Lib.V_to_T", "modulename": "Hardware.Thermistor_Lib", "qualname": "V_to_T", "type": "function", "doc": "<p>Function for converting Voltage into Temperature using the steinhart equation\n$$ \\frac{1}{T} = c_1+c_2ln(R)+c_3{ln(R)}^2+c_4{ln(R)}^3 $$\nwhere T is in Kelvin</p>\n\n<p>Args:</p>\n\n<pre><code>V (float)   : Voltage read (between 0 and 1)\n\nR (floar)   : Resistance in series with the Thermistor\n</code></pre>\n", "signature": "(V: float, R: float)", "funcdef": "def"}, {"fullname": "Hardware.hardware", "modulename": "Hardware.hardware", "type": "module", "doc": "<p>This module contains the class for handling the hardware configuration and functions related to comunicating with\nthe hardware and etc.</p>\n"}, {"fullname": "Hardware.hardware.Hardware", "modulename": "Hardware.hardware", "qualname": "Hardware", "type": "class", "doc": "<p>Wrapper around the pyfirmata Arduino Class to ease readability of the code</p>\n"}, {"fullname": "Hardware.hardware.Hardware.__init__", "modulename": "Hardware.hardware", "qualname": "Hardware.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>com_port (str) : The comport which the arduino is connected to\n\nThe systme is locked on startup\n</code></pre>\n", "signature": "(self, com_port: str)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.wait_while_input_stable", "modulename": "Hardware.hardware", "qualname": "Hardware.wait_while_input_stable", "type": "function", "doc": "<p>In most cases the input from the arduino is not stable for a while\nThis function when called waits in a blocking loop until it is</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.update", "modulename": "Hardware.hardware", "qualname": "Hardware.update", "type": "function", "doc": "<p>Updating the board (calling board.itierate())</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.green_on", "modulename": "Hardware.hardware", "qualname": "Hardware.green_on", "type": "function", "doc": "<p>Turns the green led on</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.green_off", "modulename": "Hardware.hardware", "qualname": "Hardware.green_off", "type": "function", "doc": "<p>Turns the green led off</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.red_on", "modulename": "Hardware.hardware", "qualname": "Hardware.red_on", "type": "function", "doc": "<p>Turns the red led on</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.red_off", "modulename": "Hardware.hardware", "qualname": "Hardware.red_off", "type": "function", "doc": "<p>Turns the red led off</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.get_ldr", "modulename": "Hardware.hardware", "qualname": "Hardware.get_ldr", "type": "function", "doc": "<p>Reads the ldr value and returns a float between 0 and 1</p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.buzzer_on", "modulename": "Hardware.hardware", "qualname": "Hardware.buzzer_on", "type": "function", "doc": "<p>Turns the connected buzzer on</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.buzzer_off", "modulename": "Hardware.hardware", "qualname": "Hardware.buzzer_off", "type": "function", "doc": "<p>Turns the buzzer off</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.button_pressed", "modulename": "Hardware.hardware", "qualname": "Hardware.button_pressed", "type": "function", "doc": "<p>Returns true if the button is pressed\nelse it returns falls</p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.get_temp", "modulename": "Hardware.hardware", "qualname": "Hardware.get_temp", "type": "function", "doc": "<p>Returns the temperature in Celcius (may return None if the input is not stable)</p>\n", "signature": "(self) -> Optional[float]", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.lock", "modulename": "Hardware.hardware", "qualname": "Hardware.lock", "type": "function", "doc": "<p>Sets the system into lockdown mode</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware.Hardware.unlock", "modulename": "Hardware.hardware", "qualname": "Hardware.unlock", "type": "function", "doc": "<p>Sets the system into unlock mode</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Hardware.hardware_config", "modulename": "Hardware.hardware_config", "type": "module", "doc": "<p>Conatains configurations for the hardware setup\nThese include the pins different compenets are connected to\nValues of resistors etc.</p>\n\n<p>The pins are given in the following format\npin = {X}:{Y}:{Z}</p>\n\n<p>X = a,d where a= analog,d=digital</p>\n\n<p>Y = pin number</p>\n\n<p>Z = i,o where i= input, o=output</p>\n"}, {"fullname": "morse", "modulename": "morse", "type": "module", "doc": "<h1 id=\"functions-and-classes-for-decoding-and-translating-morse-code\">Functions and classes for decoding and translating morse code</h1>\n\n<h2 id=\"morse_decoder\">Morse_Decoder</h2>\n\n<p>Used for decding the raw signal into dots and dashes</p>\n\n<h2 id=\"morsecode_translator\">MorseCode_translator</h2>\n\n<p>Converting the dots and dashes to english text</p>\n"}, {"fullname": "morse.MorseCode_translator", "modulename": "morse.MorseCode_translator", "type": "module", "doc": "<p></p>\n"}, {"fullname": "morse.MorseCode_translator.convertToWords", "modulename": "morse.MorseCode_translator", "qualname": "convertToWords", "type": "function", "doc": "<p>Converts morse code to english words</p>\n\n<p>Args:</p>\n\n<pre><code>morse (str): string containing 0,1,2,3 each representing a different symbol in morse\n</code></pre>\n", "signature": "(morse)", "funcdef": "def"}, {"fullname": "morse.MorseCode_translator.convertToMorse", "modulename": "morse.MorseCode_translator", "qualname": "convertToMorse", "type": "function", "doc": "<p>Converts plaint text to morse</p>\n\n<p>Args:</p>\n\n<pre><code>words (str): any string containing characters supported\n</code></pre>\n\n<p>This is mainly used for testing purposes</p>\n", "signature": "(words)", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder", "modulename": "morse.Morse_Decoder", "type": "module", "doc": "<p></p>\n"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING", "type": "class", "doc": "<p>Encoding scheme used in the processing of morse codes(internally in the library)</p>\n", "bases": "enum.Enum"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING.DOT", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING.DOT", "type": "variable", "doc": "<p></p>\n", "default_value": " = <MORSE_ENCODING.DOT: 0>"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING.DASH", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING.DASH", "type": "variable", "doc": "<p></p>\n", "default_value": " = <MORSE_ENCODING.DASH: 1>"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING.SYMBOL_PAUSE", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING.SYMBOL_PAUSE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <MORSE_ENCODING.SYMBOL_PAUSE: 2>"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING.LETTER_PAUSE", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING.LETTER_PAUSE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <MORSE_ENCODING.LETTER_PAUSE: 3>"}, {"fullname": "morse.Morse_Decoder.MORSE_ENCODING.WORD_PAUSE", "modulename": "morse.Morse_Decoder", "qualname": "MORSE_ENCODING.WORD_PAUSE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <MORSE_ENCODING.WORD_PAUSE: 4>"}, {"fullname": "morse.Morse_Decoder.TIMINGS", "modulename": "morse.Morse_Decoder", "qualname": "TIMINGS", "type": "class", "doc": "<p>Different time periods used in the morse code</p>\n\n<p>SHORT -> dots and inter symbol spaces (1 time units)\nMEDIUM -> dashes and inter letter spaces (3 time units)\nLONG -> inter word spaces (7 time units)</p>\n\n<p>Reference : https://morsecode.world/international/timing.html</p>\n", "bases": "enum.Enum"}, {"fullname": "morse.Morse_Decoder.TIMINGS.SHORT", "modulename": "morse.Morse_Decoder", "qualname": "TIMINGS.SHORT", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TIMINGS.SHORT: 0>"}, {"fullname": "morse.Morse_Decoder.TIMINGS.MEDIUM", "modulename": "morse.Morse_Decoder", "qualname": "TIMINGS.MEDIUM", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TIMINGS.MEDIUM: 1>"}, {"fullname": "morse.Morse_Decoder.TIMINGS.LONG", "modulename": "morse.Morse_Decoder", "qualname": "TIMINGS.LONG", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TIMINGS.LONG: 2>"}, {"fullname": "morse.Morse_Decoder.MinTimes", "modulename": "morse.Morse_Decoder", "qualname": "MinTimes", "type": "class", "doc": "<p>Used in determining whether a pulse is SHORT MEDIUM LONG\nhandles differently for high pulses and low pulses</p>\n"}, {"fullname": "morse.Morse_Decoder.MinTimes.__init__", "modulename": "morse.Morse_Decoder", "qualname": "MinTimes.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.MinTimes.SHORT", "modulename": "morse.Morse_Decoder", "qualname": "MinTimes.SHORT", "type": "variable", "doc": "<p></p>\n", "default_value": " = 0"}, {"fullname": "morse.Morse_Decoder.MinTimes.MEDIMUM", "modulename": "morse.Morse_Decoder", "qualname": "MinTimes.MEDIMUM", "type": "variable", "doc": "<p></p>\n", "default_value": " = 2"}, {"fullname": "morse.Morse_Decoder.MinTimes.LONG", "modulename": "morse.Morse_Decoder", "qualname": "MinTimes.LONG", "type": "variable", "doc": "<p></p>\n", "default_value": " = 5"}, {"fullname": "morse.Morse_Decoder.STATES", "modulename": "morse.Morse_Decoder", "qualname": "STATES", "type": "class", "doc": "<p>States the morse decoder class can be in</p>\n", "bases": "enum.Enum"}, {"fullname": "morse.Morse_Decoder.STATES.IDLE", "modulename": "morse.Morse_Decoder", "qualname": "STATES.IDLE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <STATES.IDLE: 0>"}, {"fullname": "morse.Morse_Decoder.STATES.RECORDING", "modulename": "morse.Morse_Decoder", "qualname": "STATES.RECORDING", "type": "variable", "doc": "<p></p>\n", "default_value": " = <STATES.RECORDING: 1>"}, {"fullname": "morse.Morse_Decoder.STATES.PENDING", "modulename": "morse.Morse_Decoder", "qualname": "STATES.PENDING", "type": "variable", "doc": "<p></p>\n", "default_value": " = <STATES.PENDING: 2>"}, {"fullname": "morse.Morse_Decoder.STATES.BLOCKED", "modulename": "morse.Morse_Decoder", "qualname": "STATES.BLOCKED", "type": "variable", "doc": "<p></p>\n", "default_value": " = <STATES.BLOCKED: 3>"}, {"fullname": "morse.Morse_Decoder.Configs", "modulename": "morse.Morse_Decoder", "qualname": "Configs", "type": "class", "doc": "<p></p>\n"}, {"fullname": "morse.Morse_Decoder.Configs.__init__", "modulename": "morse.Morse_Decoder", "qualname": "Configs.__init__", "type": "function", "doc": "<p>All TIME relateed configurations are in seconds</p>\n", "signature": "(self, configuration_dictionary: Dict[str, float])", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.get_configurations", "modulename": "morse.Morse_Decoder", "qualname": "get_configurations", "type": "function", "doc": "<p>functions used to get configurations from the config file</p>\n", "signature": "(config_file) -> morse.Morse_Decoder.Configs", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.configs", "modulename": "morse.Morse_Decoder", "qualname": "configs", "type": "variable", "doc": "<p></p>\n", "default_value": " = <morse.Morse_Decoder.Configs object>"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder", "type": "class", "doc": "<p>Morse_Decoder class is used to decode the morse code recieved via the input signal\nThe class operates as a state machine.\nMethod get_signal(signal_state:bool,current_time)</p>\n\n<p>When this is executed depending on previous states that is stored in the class it will determine what the morse signal is doing.\nWhen decoder detects that the morse signal is over it will decode it and call the callback function provided upon construction with\nthe decoded morse signal passed as an argument.</p>\n\n<p>Since morse code is time dependant (length of the pulses change its meaning) a timer is required for the operation of the class\nin order to calculate the duration of individual (low or high) signals. The timer can be provided in the contructor.</p>\n\n<p>Note:   there are no checks to see whether the current time is greater than all previously provided times or whether the elapsed time is correct\n        providing time that is less than previouly provided times will have undocumented behaviout\n        it is responisbility of the caller to ensure the provided time is correct (you can use time.time from the time library for example)</p>\n"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.__init__", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>call_back (str)-&gt;None : function to be called when a morse code has been\n                        decoded\ntime (float)          : time the decoder starts at \n                        (time of creation all times are )\n</code></pre>\n", "signature": "(self, call_back: Callable[[str], NoneType], current_time: float)", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.start_pending_state", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.start_pending_state", "type": "function", "doc": "<p>utility function to,\nstarts the pending state -- when a state change happens\nnow -> time point the change occured</p>\n", "signature": "(self, now: float) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.reject_pending_state", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.reject_pending_state", "type": "function", "doc": "<p>utility function to,\nreject the state change as noise</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.block", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.block", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.if_blocked_unblock_and_reset", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.if_blocked_unblock_and_reset", "type": "function", "doc": "<p></p>\n", "signature": "(self, current_time: float) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.accept_pending_state", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.accept_pending_state", "type": "function", "doc": "<p>new_state -> the new_state of the decoder to be set could be recording or idle (current has to pending)\nUtility function for accepting the change of state of the ldr as not noise and legitimate\nthis function handles all the logic required for this process such as,\n    change of state -- setting self.state =  new_state \n    changing the last_time to the beginning of the new signal\n    if there was a signal previous being recoreded save its duration in self.duratons</p>\n", "signature": "(self, new_state: morse.Morse_Decoder.STATES) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.get_signal", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.get_signal", "type": "function", "doc": "<p>Must be called within the event loop.\nIf a coherent morse code was recieved it will forward the data for conversion\nand to be finally sent without blocking the main event loop</p>\n", "signature": "(self, new_signal_state: bool, current_time: float) -> bool", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.process_code", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.process_code", "type": "function", "doc": "<p>Called when a morse code has been captured by get_signal</p>\n", "signature": "(self, timing_data: List[float]) -> None", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.convert_timing_to_code", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.convert_timing_to_code", "type": "function", "doc": "<p>utililty function for converting a list of timing information into a format detailed in MORSE_ENCODING enum\nto represent the morse code information</p>\n", "signature": "(\n    self,\n    timing_data: List[float]\n) -> List[morse.Morse_Decoder.MORSE_ENCODING]", "funcdef": "def"}, {"fullname": "morse.Morse_Decoder.Morse_Decoder.time_to_timeunit", "modulename": "morse.Morse_Decoder", "qualname": "Morse_Decoder.time_to_timeunit", "type": "function", "doc": "<p>utility funtion for converting a single time duration to the corresponding timeunit\nthis function handles the natural variability of the signal and determines the most appropriate number\nof time units for a given time duration</p>\n", "signature": "(time: float) -> morse.Morse_Decoder.TIMINGS", "funcdef": "def"}, {"fullname": "morse.morse_lib", "modulename": "morse.morse_lib", "type": "module", "doc": "<h1 id=\"dictionary-containing-the-conversions-from-letter-to-morse-code-and-vice-versa\">Dictionary Containing the conversions from letter to morse code and vice versa</h1>\n"}, {"fullname": "morse.testing_utilities", "modulename": "morse.testing_utilities", "type": "module", "doc": "<p>Conatinins helper functions and classes useful for testing the code</p>\n"}, {"fullname": "morse.testing_utilities.Debug_Timer", "modulename": "morse.testing_utilities", "qualname": "Debug_Timer", "type": "class", "doc": "<p></p>\n"}, {"fullname": "morse.testing_utilities.Debug_Timer.__init__", "modulename": "morse.testing_utilities", "qualname": "Debug_Timer.__init__", "type": "function", "doc": "<p>This class is used to simulate time.time() for a simulated signal\nwithout having to wait for the actual duration. (Makes for rapid testing)</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Debug_Timer.time", "modulename": "morse.testing_utilities", "qualname": "Debug_Timer.time", "type": "function", "doc": "<p>Returns the simulated time as a float</p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Debug_Timer.tick", "modulename": "morse.testing_utilities", "qualname": "Debug_Timer.tick", "type": "function", "doc": "<p>Increments the time by the specified delta</p>\n", "signature": "(self, delta: float)", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Automatic_Morse", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse", "type": "class", "doc": "<p>Simulates an arduino signal \ndoes not support empty strings</p>\n"}, {"fullname": "morse.testing_utilities.Automatic_Morse.__init__", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    current_time: float,\n    start_time: float,\n    message_encoding: List[morse.Morse_Decoder.MORSE_ENCODING],\n    start_state: bool = False\n)", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Automatic_Morse.MAXTIME", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.MAXTIME", "type": "variable", "doc": "<p></p>\n", "default_value": " = 100"}, {"fullname": "morse.testing_utilities.Automatic_Morse.random_time", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.random_time", "type": "function", "doc": "<p>returns a random time duration between t1 and t2</p>\n", "signature": "(t1: float, t2: float)", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Automatic_Morse.encoding_to_time", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.encoding_to_time", "type": "function", "doc": "<p></p>\n", "signature": "(self, message: List[morse.Morse_Decoder.MORSE_ENCODING])", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Automatic_Morse.generate_times", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.generate_times", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    times: List[Literal[<TIMINGS.LONG: 2>, <TIMINGS.MEDIUM: 1>, <TIMINGS.SHORT: 0>]]\n) -> List[float]", "funcdef": "def"}, {"fullname": "morse.testing_utilities.Automatic_Morse.no_noise_signal_get", "modulename": "morse.testing_utilities", "qualname": "Automatic_Morse.no_noise_signal_get", "type": "function", "doc": "<p></p>\n", "signature": "(self, current_time: float)", "funcdef": "def"}, {"fullname": "Network", "modulename": "Network", "type": "module", "doc": "<p>Contains classes and functions that help in handling mqtt messages and etc.</p>\n"}, {"fullname": "Network.mqtt", "modulename": "Network.mqtt", "type": "module", "doc": "<p>wrappers around the paho mqtt library</p>\n"}, {"fullname": "Network.mqtt.MQTT_NETWORK_ERROR", "modulename": "Network.mqtt", "qualname": "MQTT_NETWORK_ERROR", "type": "class", "doc": "<p>Exception to be raised when there is an mqtt error</p>\n", "bases": "builtins.Exception"}, {"fullname": "Network.mqtt.MQTT_Handler", "modulename": "Network.mqtt", "qualname": "MQTT_Handler", "type": "class", "doc": "<p>Wrapper class around the paho-mqtt client class</p>\n", "bases": "paho.mqtt.client.Client"}, {"fullname": "Network.mqtt.MQTT_Handler.__init__", "modulename": "Network.mqtt", "qualname": "MQTT_Handler.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>id (str)            : Name of the client\n\nserver (str)        : borker adress\n\nport (int)          : port the mqtt broker is running on\n\non_failuer ()-&gt;None : function to be called when the system fails (optional)\n\nmax_reconnects      : Maximum number of times the server tries to reconnect\n                    Before raising an error when a disconnect event happens\n</code></pre>\n\n<p>On instantiation a thread is automatically started to handle mqtt events</p>\n", "signature": "(\n    self,\n    id: str,\n    server: str,\n    port: int,\n    on_failure: Optional[Callable[[], NoneType]] = None,\n    max_reconects: Optional[int] = None\n)", "funcdef": "def"}, {"fullname": "Network.mqtt.MQTT_Handler.observe_event", "modulename": "Network.mqtt", "qualname": "MQTT_Handler.observe_event", "type": "function", "doc": "<p>This function is used to add events to be called when a certain topic\nis recieved.</p>\n\n<p>Args:</p>\n\n<pre><code>topic (str)         :   topic for when a mqtt message under the said topic arrives \n                        the function will be called\n\nfunc  (str)-&gt;None   :   A function that takes in the message payload, \n                        that is called when a message of the given topic arrives\n</code></pre>\n\n<p>Several functions can be added to the same topic</p>\n", "signature": "(self, topic: str, func: Callable[[str], NoneType])", "funcdef": "def"}, {"fullname": "Network.mqtt.MQTT_Handler.on_connect", "modulename": "Network.mqtt", "qualname": "MQTT_Handler.on_connect", "type": "function", "doc": "<p>Runs on connect</p>\n", "signature": "(self, client, userdata, flags, rc)", "funcdef": "def"}, {"fullname": "Network.mqtt.MQTT_Handler.on_message", "modulename": "Network.mqtt", "qualname": "MQTT_Handler.on_message", "type": "function", "doc": "<p>Custom implementation for on_message for observe event to work</p>\n", "signature": "(self, client, userdata, msg)", "funcdef": "def"}, {"fullname": "Network.mqtt.MQTT_Handler.on_disconnect", "modulename": "Network.mqtt", "qualname": "MQTT_Handler.on_disconnect", "type": "function", "doc": "<p>Custom on diconnect function so that it tries to reconnect for max_reconnect amount</p>\n", "signature": "(self, userdata, flags, rc)", "funcdef": "def"}, {"fullname": "pass_lib", "modulename": "pass_lib", "type": "module", "doc": "<p>Functions and classes for making password handling and maintaining easier</p>\n"}, {"fullname": "pass_lib.pass_check", "modulename": "pass_lib.pass_check", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pass_lib.pass_check.hash_string", "modulename": "pass_lib.pass_check", "qualname": "hash_string", "type": "function", "doc": "<p>converts supplied string into a md5 hash in hexformat</p>\n", "signature": "(string: str)", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Respones", "modulename": "pass_lib.pass_check", "qualname": "Password_Respones", "type": "class", "doc": "<p>Response structure for a password query</p>\n", "bases": "typing.NamedTuple"}, {"fullname": "pass_lib.pass_check.Password_Respones.__init__", "modulename": "pass_lib.pass_check", "qualname": "Password_Respones.__init__", "type": "function", "doc": "<p>Create new instance of Password_Respones(exists, valid)</p>\n", "signature": "(_cls, exists: bool, valid: Optional[bool] = None)", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Respones.exists", "modulename": "pass_lib.pass_check", "qualname": "Password_Respones.exists", "type": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": bool"}, {"fullname": "pass_lib.pass_check.Password_Respones.valid", "modulename": "pass_lib.pass_check", "qualname": "Password_Respones.valid", "type": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": Optional[bool]"}, {"fullname": "pass_lib.pass_check.Password_Manager", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager", "type": "class", "doc": "<p>Class for querying and managing passwords and passcodes used in the project</p>\n"}, {"fullname": "pass_lib.pass_check.Password_Manager.__init__", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager.__init__", "type": "function", "doc": "<p>Args:\n    password_dictionary : dictionary conatining users and passwords\n    on_update           : function to be called when the dictionary is updated (such as sacing to a database or file)</p>\n", "signature": "(\n    self,\n    password_dictionary: Dict[str, str],\n    on_update: Optional[Callable[[Dict[str, str]], NoneType]] = None\n)", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Manager.check_password", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager.check_password", "type": "function", "doc": "<p>Checks the password of stored with the user against the provided password</p>\n\n<p>Args:</p>\n\n<pre><code>user (str)      : username for the password\npassword(str)   : password to be checked\n</code></pre>\n", "signature": "(\n    self,\n    user: str,\n    password: str\n) -> pass_lib.pass_check.Password_Respones", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Manager.check_password_hash", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager.check_password_hash", "type": "function", "doc": "<p>Similar to password check but checks the hash of the password against the stored hash</p>\n", "signature": "(\n    self,\n    user: str,\n    password: str\n) -> pass_lib.pass_check.Password_Respones", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Manager.password_manager_from_file", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager.password_manager_from_file", "type": "function", "doc": "<p>Used to create a passwrod manager from a json file\nautomatically adds an appropriate on_update function</p>\n", "signature": "(cls, file_name: str)", "funcdef": "def"}, {"fullname": "pass_lib.pass_check.Password_Manager.update_passwords", "modulename": "pass_lib.pass_check", "qualname": "Password_Manager.update_passwords", "type": "function", "doc": "<p>Used to update passwords</p>\n", "signature": "(\n    self,\n    user: str,\n    password: str,\n    master_user: str,\n    master_password: str,\n    store_hash=False,\n    master_check_hash=True\n)", "funcdef": "def"}, {"fullname": "Utility", "modulename": "Utility", "type": "module", "doc": "<p>Classes for event management and resource Handling</p>\n"}, {"fullname": "Utility.Event", "modulename": "Utility.Event", "type": "module", "doc": "<p>Contains utility functions and classes to handle events</p>\n"}, {"fullname": "Utility.Event.TimedEvent", "modulename": "Utility.Event", "qualname": "TimedEvent", "type": "class", "doc": "<p>performs a certain function every t seconds</p>\n"}, {"fullname": "Utility.Event.TimedEvent.__init__", "modulename": "Utility.Event", "qualname": "TimedEvent.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>current_time (float)    : The time of instantiation \nfunction ()-&gt;None       : Function to be called after time elapsed\n</code></pre>\n", "signature": "(\n    self,\n    current_time: float,\n    interval: float,\n    function: Callable[[], NoneType]\n)", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEvent.run", "modulename": "Utility.Event", "qualname": "TimedEvent.run", "type": "function", "doc": "<p>runs the function if the set time has elapsed</p>\n", "signature": "(self, current_time: float) -> None", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEvent.reset", "modulename": "Utility.Event", "qualname": "TimedEvent.reset", "type": "function", "doc": "<p>reset the time</p>\n", "signature": "(self, current_time: float)", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEventManager", "modulename": "Utility.Event", "qualname": "TimedEventManager", "type": "class", "doc": "<p>Manages a lot of TimedEvent</p>\n"}, {"fullname": "Utility.Event.TimedEventManager.__init__", "modulename": "Utility.Event", "qualname": "TimedEventManager.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>timer: ()-&gt;float: a function that proveides the current time when called,\n                  default is time.time\n</code></pre>\n", "signature": "(self, timer: Callable[[], float] = <built-in function time>)", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEventManager.add_event", "modulename": "Utility.Event", "qualname": "TimedEventManager.add_event", "type": "function", "doc": "<p>Add an event to be run on an interval specified</p>\n\n<p>Args:</p>\n\n<pre><code>delay (float)       : delay between function calls\n\nfunction ()-&gt;None   : Function to be called on intervals\n</code></pre>\n", "signature": "(self, delay: float, function: Callable[[], NoneType])", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEventManager.reset_all", "modulename": "Utility.Event", "qualname": "TimedEventManager.reset_all", "type": "function", "doc": "<p>Reset all timed events</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Event.TimedEventManager.run", "modulename": "Utility.Event", "qualname": "TimedEventManager.run", "type": "function", "doc": "<p>This function must be called in a loop for the events to function correctly</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Event.Event_Manager", "modulename": "Utility.Event", "qualname": "Event_Manager", "type": "class", "doc": "<p>This class is used to manage different events\nFor an event driven style programming</p>\n"}, {"fullname": "Utility.Event.Event_Manager.__init__", "modulename": "Utility.Event", "qualname": "Event_Manager.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Event.Event_Manager.on_event", "modulename": "Utility.Event", "qualname": "Event_Manager.on_event", "type": "function", "doc": "<p>Event and the function to be called on the event is added hear</p>\n\n<p>Args:</p>\n\n<pre><code>event_name(str)     : event name to identify the event\n\nfunction ()-&gt;None   : function to be called when the event_name occurs\n</code></pre>\n", "signature": "(self, event_name: str, function: Callable[[], NoneType])", "funcdef": "def"}, {"fullname": "Utility.Event.Event_Manager.publish_event", "modulename": "Utility.Event", "qualname": "Event_Manager.publish_event", "type": "function", "doc": "<p>Create and event of the name event_name, all functions under event_name will be called</p>\n", "signature": "(self, event_name: str)", "funcdef": "def"}, {"fullname": "Utility.Resource", "modulename": "Utility.Resource", "type": "module", "doc": "<p>Classes for handling various resources that is accessed by many parties simultaneously</p>\n"}, {"fullname": "Utility.Resource.Multi_Or_Switch", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch", "type": "class", "doc": "<p>This is a switch which can be turned on or off.\nThere can be several handlers to the Multi_Switch</p>\n\n<p>The switch is turned on if one or more handlers request it to be on\nThe swithc is off if no handler has requested it to be on (every handler has requested off state)\n(Hence the Or in the name)</p>\n\n<p>A handler can't turn off the switch if someone else need it to be on</p>\n\n<p>This is especially usefull in the buzzer for example as it is a shared resource and\nnaively turning it on or off might make one process turn off the buzzer that some other process\nhas requested to be on.</p>\n"}, {"fullname": "Utility.Resource.Multi_Or_Switch.__init__", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>on_turn_on ()-&gt;None     : function to be run when the switch is on\n\non_turn_off ()-&gt;None    : function to be run when the of turned off\n</code></pre>\n", "signature": "(\n    self,\n    on_turn_on: Callable[[], NoneType],\n    on_turn_off: Callable[[], NoneType]\n)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch.on", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch.on", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch.off", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch.off", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch.master_off", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch.master_off", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch.get_handle", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch.get_handle", "type": "function", "doc": "<p>returns a handle to the switch so multiple components can acess it\nwithout interference</p>\n", "signature": "(self) -> Utility.Resource.Multi_Or_Switch_handle", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch_handle", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch_handle", "type": "class", "doc": "<p>Handle for a multi_or_switch</p>\n"}, {"fullname": "Utility.Resource.Multi_Or_Switch_handle.__init__", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch_handle.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, parent: Utility.Resource.Multi_Or_Switch)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch_handle.request_on", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch_handle.request_on", "type": "function", "doc": "<p>Request the parent swithc to turn on</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Utility.Resource.Multi_Or_Switch_handle.request_off", "modulename": "Utility.Resource", "qualname": "Multi_Or_Switch_handle.request_off", "type": "function", "doc": "<p>Request the parent switch to turn off\nThe parent switch will only turn off\nif all handles are requesting the off state</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center", "modulename": "Central_Control_Center", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Central_Control_Center.System", "modulename": "Central_Control_Center", "qualname": "System", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Central_Control_Center.System.__init__", "modulename": "Central_Control_Center", "qualname": "System.__init__", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>name (str)              : mqtt client name\n\nserver_port (int)       : mqtt server port\n\nserver_adress (str)     : mqtt broker adress\n\ncom_port (str)          : arduino comport\n</code></pre>\n", "signature": "(\n    self,\n    name: str,\n    server_port: int,\n    server_address: str,\n    com_port: str\n)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.initialize_mqtt_handler", "modulename": "Central_Control_Center", "qualname": "System.initialize_mqtt_handler", "type": "function", "doc": "<p>Intializing the mqtt handler</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.intialize_event_managers", "modulename": "Central_Control_Center", "qualname": "System.intialize_event_managers", "type": "function", "doc": "<p>Initializing the event manager</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.initialize_hardware", "modulename": "Central_Control_Center", "qualname": "System.initialize_hardware", "type": "function", "doc": "<p>Intializing the hardware (also wating while input is stable)</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.system_lock", "modulename": "Central_Control_Center", "qualname": "System.system_lock", "type": "function", "doc": "<p>Lock the system</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.system_unlock", "modulename": "Central_Control_Center", "qualname": "System.system_unlock", "type": "function", "doc": "<p>Unlock the system</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.is_fire", "modulename": "Central_Control_Center", "qualname": "System.is_fire", "type": "function", "doc": "<p>Check if the temperature is too high</p>\n", "signature": "(self, temp)", "funcdef": "def"}, {"fullname": "Central_Control_Center.System.main_loop", "modulename": "Central_Control_Center", "qualname": "System.main_loop", "type": "function", "doc": "<p>The main loop of the Central Control Center</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Server", "modulename": "Central_Control_Server", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Central_Control_Server.Central_Control_Server", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Central_Control_Server.Central_Control_Server.__init__", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Server.Central_Control_Server.initialize_event_manager", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server.initialize_event_manager", "type": "function", "doc": "<p>Intializers the even manager system</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Server.Central_Control_Server.send_to_mqtt_decorator", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server.send_to_mqtt_decorator", "type": "function", "doc": "<p>This is a utility function that takes in a function that takes in a\nstring and returns a new function that instead of returning the said string\npublishes to the mqtt_server under the topic topic </p>\n\n<p>This is used to convert password checker functions provided by other teams\nwhich take in a str as the pass code and returns the correct access code (denied,accepted etc),\ninto functions that does the same but publishes the result instead</p>\n\n<p>topic: The topic to which the returning function will publish to\nfunction: function to be decorated</p>\n", "signature": "(\n    self,\n    topic: str,\n    function: Callable[[str], str]\n) -> Callable[[str], NoneType]", "funcdef": "def"}, {"fullname": "Central_Control_Server.Central_Control_Server.initialize_mqtt_handler", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server.initialize_mqtt_handler", "type": "function", "doc": "<p>Intializes the mqtt handler</p>\n\n<p>Mainly used to define what should happen on recieving messages under a given topic</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Central_Control_Server.Central_Control_Server.loop", "modulename": "Central_Control_Server", "qualname": "Central_Control_Server.loop", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Serverlogin_utilities", "modulename": "Serverlogin_utilities", "type": "module", "doc": "<p>Functions for getting user name and password for server and\nfor providing the welcome message</p>\n"}, {"fullname": "Serverlogin_utilities.print_welcome_message", "modulename": "Serverlogin_utilities", "qualname": "print_welcome_message", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Serverlogin_utilities.validate_user", "modulename": "Serverlogin_utilities", "qualname": "validate_user", "type": "function", "doc": "<p>Takes user name and password and validates</p>\n", "signature": "(pasword_manager: pass_lib.pass_check.Password_Manager) -> bool", "funcdef": "def"}, {"fullname": "teams_password_checkers", "modulename": "teams_password_checkers", "type": "module", "doc": "<p>Conatins functions for processing and validating passwords from many sub teams</p>\n"}, {"fullname": "teams_password_checkers.CCC_pass_checker", "modulename": "teams_password_checkers", "qualname": "CCC_pass_checker", "type": "class", "doc": "<p>Code for validating the password from CCC (Morse Code)</p>\n"}, {"fullname": "teams_password_checkers.CCC_pass_checker.__init__", "modulename": "teams_password_checkers", "qualname": "CCC_pass_checker.__init__", "type": "function", "doc": "<p>Used to handle checking passcodes sent from the CCC.\nArgs:</p>\n\n<pre><code>pass_man        : password manager containing the passwords\n\non_password_err : This function will be called when there is an invalid password\n                    Default is None. If None nothing will be done\n\non_fail         : This function will be called when there is some other error such\n                    as a missing user etc.\n</code></pre>\n", "signature": "(\n    self,\n    pass_man: pass_lib.pass_check.Password_Manager,\n    on_fail: Optional[Callable[[], NoneType]] = None,\n    on_password_err: Optional[Callable[[], NoneType]] = None\n)", "funcdef": "def"}, {"fullname": "teams_password_checkers.CCC_pass_checker.MORSE_CODE_USER", "modulename": "teams_password_checkers", "qualname": "CCC_pass_checker.MORSE_CODE_USER", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'MORSE_CODE'"}, {"fullname": "teams_password_checkers.CCC_pass_checker.check", "modulename": "teams_password_checkers", "qualname": "CCC_pass_checker.check", "type": "function", "doc": "<p>Checks the password decoded by the CCC (morse code from flash to plaintext)\nand sends the appropriate response if so</p>\n\n<p>Args:</p>\n\n<pre><code>password (str) : the password to be checked\n</code></pre>\n", "signature": "(self, password: str) -> str", "funcdef": "def"}, {"fullname": "teams_password_checkers.CDR_sequence_checker", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker", "type": "class", "doc": "<p>Code for validating the sequences sent by the CDR (Provided by team A)</p>\n"}, {"fullname": "teams_password_checkers.CDR_sequence_checker.__init__", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker.__init__", "type": "function", "doc": "<p>Used to handle checking passcodes sent from the CDR.\nArgs:</p>\n\n<pre><code>on_password_err : This function will be called when there is an invalid password\n                    Default is None. If None nothing will be done\non_fail         : This function will be called when there is some other error such\n                    as a missing user etc.\n</code></pre>\n", "signature": "(\n    self,\n    on_password_err: Optional[Callable[[], NoneType]] = None,\n    on_fail: Optional[Callable[[], NoneType]] = None\n)", "funcdef": "def"}, {"fullname": "teams_password_checkers.CDR_sequence_checker.TOP_SECRECT", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker.TOP_SECRECT", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'TOP_SECRET'"}, {"fullname": "teams_password_checkers.CDR_sequence_checker.SECRET", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker.SECRET", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'SECRET'"}, {"fullname": "teams_password_checkers.CDR_sequence_checker.CONFIDENTIAL", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker.CONFIDENTIAL", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'CONFIDENTIAL'"}, {"fullname": "teams_password_checkers.CDR_sequence_checker.check", "modulename": "teams_password_checkers", "qualname": "CDR_sequence_checker.check", "type": "function", "doc": "<p>Args:</p>\n\n<pre><code>password : the sequence sent by the CDR\n</code></pre>\n\n<p>this function will check the signal and return the appropiate response</p>\n", "signature": "(self, password: str) -> str", "funcdef": "def"}, {"fullname": "teams_password_checkers.PO_knock_checker", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker", "type": "class", "doc": "<p>Code for validating the knocks sent by the PO (Provided by team B)</p>\n"}, {"fullname": "teams_password_checkers.PO_knock_checker.__init__", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker.__init__", "type": "function", "doc": "<p>Used to handle checking passcodes sent from the CDR.</p>\n\n<p>Args:</p>\n\n<pre><code>on_password_err : This function will be called when there is an invalid password\n                    Default is None. If None nothing will be done\non_fail         : This function will be called when there is some other error such\n                    as a missing user etc.\n</code></pre>\n", "signature": "(\n    self,\n    on_password_err: Optional[Callable[[], NoneType]] = None,\n    on_fail: Optional[Callable[[], NoneType]] = None\n)", "funcdef": "def"}, {"fullname": "teams_password_checkers.PO_knock_checker.PASS_KNOCK", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker.PASS_KNOCK", "type": "variable", "doc": "<p></p>\n", "default_value": " = [0.16655588150024414, 0.13585114479064941, 0.3684210777282715, 0.11480975151062012, 0.1613321304321289, 0.4034092426300049, 0.40139293670654297, 0.38600611686706543]"}, {"fullname": "teams_password_checkers.PO_knock_checker.TOLERANCE", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker.TOLERANCE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 0.2"}, {"fullname": "teams_password_checkers.PO_knock_checker.compare_knocks", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker.compare_knocks", "type": "function", "doc": "<p></p>\n", "signature": "(cls, pass_knocks)", "funcdef": "def"}, {"fullname": "teams_password_checkers.PO_knock_checker.check", "modulename": "teams_password_checkers", "qualname": "PO_knock_checker.check", "type": "function", "doc": "<p>Checks whether sent knock is correct and returns the appropraite response</p>\n\n<p>Args:</p>\n\n<pre><code>array(str) : A python list containing converted to a string e.g. ['1.0,2.0,3.0,4.5,5.2']\n</code></pre>\n\n<p>As the array is in string format it needs to be decoded to work with we will exploit the\nfact that in the json format lists are implemented in the same way to convert the string to a list\nusing json.loads</p>\n", "signature": "(self, str_array: str) -> str", "funcdef": "def"}, {"fullname": "Topics", "modulename": "Topics", "type": "module", "doc": "<p>Conatins the topic used by mqtt protocols</p>\n"}, {"fullname": "Topics.Topic_Wrapper", "modulename": "Topics", "qualname": "Topic_Wrapper", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Topics.Topic_Wrapper.__init__", "modulename": "Topics", "qualname": "Topic_Wrapper.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, center_name: str, group_name: str = 'G9')", "funcdef": "def"}, {"fullname": "Topics.CCC", "modulename": "Topics", "qualname": "CCC", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Topics.CCC.__init__", "modulename": "Topics", "qualname": "CCC.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Topics.CCC.TEMPERATURE", "modulename": "Topics", "qualname": "CCC.TEMPERATURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/TEMPERATURE'"}, {"fullname": "Topics.CCC.SYS_ERR", "modulename": "Topics", "qualname": "CCC.SYS_ERR", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/SYS_ERR'"}, {"fullname": "Topics.CCC.MORSE_SEND", "modulename": "Topics", "qualname": "CCC.MORSE_SEND", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/MORSE_CODE'"}, {"fullname": "Topics.CCC.MORSE_ACCESS", "modulename": "Topics", "qualname": "CCC.MORSE_ACCESS", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/MORSE_VALIDATE'"}, {"fullname": "Topics.CCC.ALARM_ON", "modulename": "Topics", "qualname": "CCC.ALARM_ON", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/ALARM_ON'"}, {"fullname": "Topics.CCC.RAISE_ALARM", "modulename": "Topics", "qualname": "CCC.RAISE_ALARM", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/ALARM_RAISE'"}, {"fullname": "Topics.CCC.LOCKDOWN", "modulename": "Topics", "qualname": "CCC.LOCKDOWN", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/LOCKDOWN'"}, {"fullname": "Topics.CCC.STATUS", "modulename": "Topics", "qualname": "CCC.STATUS", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCC/STATUS'"}, {"fullname": "Topics.CCC.ACESS_GRANTED", "modulename": "Topics", "qualname": "CCC.ACESS_GRANTED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'GRANTED'"}, {"fullname": "Topics.CCC.ACESS_DENIED", "modulename": "Topics", "qualname": "CCC.ACESS_DENIED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'DENIED'"}, {"fullname": "Topics.CCC.LOCKED", "modulename": "Topics", "qualname": "CCC.LOCKED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'LOCKED'"}, {"fullname": "Topics.CCC.UNLOCKED", "modulename": "Topics", "qualname": "CCC.UNLOCKED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'UNLOCKED'"}, {"fullname": "Topics.CCC.SECURE", "modulename": "Topics", "qualname": "CCC.SECURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'SECURE'"}, {"fullname": "Topics.CCC.INSECURE", "modulename": "Topics", "qualname": "CCC.INSECURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'INSECURE'"}, {"fullname": "Topics.CCS", "modulename": "Topics", "qualname": "CCS", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Topics.CCS.__init__", "modulename": "Topics", "qualname": "CCS.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Topics.CCS.SYS_ERR", "modulename": "Topics", "qualname": "CCS.SYS_ERR", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CCS/SYS_ERR'"}, {"fullname": "Topics.PO", "modulename": "Topics", "qualname": "PO", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Topics.PO.__init__", "modulename": "Topics", "qualname": "PO.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Topics.PO.TEMPERATURE", "modulename": "Topics", "qualname": "PO.TEMPERATURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/TEMPERATURE'"}, {"fullname": "Topics.PO.SYS_ERR", "modulename": "Topics", "qualname": "PO.SYS_ERR", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/SYS_ERR'"}, {"fullname": "Topics.PO.KNOCK_SEND", "modulename": "Topics", "qualname": "PO.KNOCK_SEND", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/KNOCK_SEND'"}, {"fullname": "Topics.PO.KNOCK_ACCESS", "modulename": "Topics", "qualname": "PO.KNOCK_ACCESS", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/KNOCK_ACCESS'"}, {"fullname": "Topics.PO.ALARM_ON", "modulename": "Topics", "qualname": "PO.ALARM_ON", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/ALARM_ON'"}, {"fullname": "Topics.PO.RAISE_ALARM", "modulename": "Topics", "qualname": "PO.RAISE_ALARM", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/ALARM_RAISE'"}, {"fullname": "Topics.PO.PANIC_BUTTON", "modulename": "Topics", "qualname": "PO.PANIC_BUTTON", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/PANIC_BUTTON'"}, {"fullname": "Topics.PO.LOCKDOWN", "modulename": "Topics", "qualname": "PO.LOCKDOWN", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/PO/LOCKDOWN'"}, {"fullname": "Topics.PO.PANIC", "modulename": "Topics", "qualname": "PO.PANIC", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'PANIC'"}, {"fullname": "Topics.PO.ACESS_GRANTED", "modulename": "Topics", "qualname": "PO.ACESS_GRANTED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'GRANTED'"}, {"fullname": "Topics.PO.ACESS_DENIED", "modulename": "Topics", "qualname": "PO.ACESS_DENIED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'DENIED'"}, {"fullname": "Topics.CDR", "modulename": "Topics", "qualname": "CDR", "type": "class", "doc": "<p></p>\n"}, {"fullname": "Topics.CDR.__init__", "modulename": "Topics", "qualname": "CDR.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Topics.CDR.TEMPERATURE", "modulename": "Topics", "qualname": "CDR.TEMPERATURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/TEMPERATURE'"}, {"fullname": "Topics.CDR.LIGHT_INTENSITY", "modulename": "Topics", "qualname": "CDR.LIGHT_INTENSITY", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/LIGHT_INTENSITY'"}, {"fullname": "Topics.CDR.FLOOR_PRESSURE", "modulename": "Topics", "qualname": "CDR.FLOOR_PRESSURE", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/FLOOR_PRESSURE'"}, {"fullname": "Topics.CDR.SYS_ERR", "modulename": "Topics", "qualname": "CDR.SYS_ERR", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/SYS_ERR'"}, {"fullname": "Topics.CDR.SEQ_SEND", "modulename": "Topics", "qualname": "CDR.SEQ_SEND", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/SEQ_SEND'"}, {"fullname": "Topics.CDR.SEQ_ACCESS", "modulename": "Topics", "qualname": "CDR.SEQ_ACCESS", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/SEQ_ACCESS'"}, {"fullname": "Topics.CDR.ALARM_ON", "modulename": "Topics", "qualname": "CDR.ALARM_ON", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/ALARM_ON'"}, {"fullname": "Topics.CDR.RAISE_ALARM", "modulename": "Topics", "qualname": "CDR.RAISE_ALARM", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/ALARM_RAISE'"}, {"fullname": "Topics.CDR.PANIC_BUTTON", "modulename": "Topics", "qualname": "CDR.PANIC_BUTTON", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/PANIC_BUTTON'"}, {"fullname": "Topics.CDR.LOCKDOWN", "modulename": "Topics", "qualname": "CDR.LOCKDOWN", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'G9/CDR/LOCKDOWN'"}, {"fullname": "Topics.CDR.GRANTED_TOPSECRET", "modulename": "Topics", "qualname": "CDR.GRANTED_TOPSECRET", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'GRANTED TOP SECRET'"}, {"fullname": "Topics.CDR.GRANTED_SECRET", "modulename": "Topics", "qualname": "CDR.GRANTED_SECRET", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'GRANTED SECRET'"}, {"fullname": "Topics.CDR.GRANTED_CONFIDENTIAL", "modulename": "Topics", "qualname": "CDR.GRANTED_CONFIDENTIAL", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'GRANTED CONFIDENTIAL'"}, {"fullname": "Topics.CDR.ACCESS_DENIED", "modulename": "Topics", "qualname": "CDR.ACCESS_DENIED", "type": "variable", "doc": "<p></p>\n", "default_value": " = 'DENIED'"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();